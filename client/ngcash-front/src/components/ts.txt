interface TitleProps {
  children: React.ReactNode
  text: string;
};


const Title = ({children,text}: TitleProps) => {

  return <h1>
    {text}
    {children}
    </h1>

};


////////////////////////////////////////////////

type UserProps = typeof User2;


const User2 = {
  id: 1,
  username: "Gab",
  age: 30,
  isAdmin: true,

}

const mary: UserProps = {
  id: 2,
  username: "mary",
  age: 28,
  isAdmin: false,
};


///////////////////////////////////////////

function sumNumbers(a:number, b:number): number {
  return a + b
};

///////////////////////////////////////////


const items = [ {id: 1, name: "gab"}, {id: 2, name: "mary"} ];


function List <ItemType> ({items, render}:{items: ItemType[]; render: (item: ItemType, index: number) => React.ReactNode}) {

  return (
    <ul>
      {items.map((item, index) => {
        return render (item, index);
      })}
    </ul>
  )
  
};

// no "app" =

<List items={items} render={(item, index) => {
  if (item.id === 1) {
    return <p>{item.name}</p>
  }

  return <h3>{item.name}</h3>
}}/>

//////////////////////////////////////////////////

  const [tests, setTests] = useState([]);


  useEffect(() => {
      axios.get("http://localhost:5000/user").then((res) => setTests(res.data)).catch((err) => console.log(err));
  });



// type PropsTeste = {
//     color: string;
// }


// export function CorpoTeste (props: PropsWithChildren<PropsTeste>) {

//     return (

        

//         <h5 style={{color: props.color}}>{props.children}, </h5>

//     )
// };

// export function Card (props: PropsWithChildren) {
//     return (
//         <h5>{props.children}</h5>
//     )
// };




      <Typography gutterBottom variant="h5" component="div" color="white">
        {tests.map((test) => (
          <CorpoMain>{test['userName']}</CorpoMain>
        ))};
      </Typography>